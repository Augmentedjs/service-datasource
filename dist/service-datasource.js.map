{"version":3,"sources":["webpack://service-datasource/webpack/universalModuleDefinition","webpack://service-datasource/webpack/bootstrap","webpack://service-datasource/./src/datasourceStyle.js","webpack://service-datasource/./src/datasource.js","webpack://service-datasource/./src/memoryDataSource.js","webpack://service-datasource/./src/mongoDataSource.js","webpack://service-datasource/./src/solrDataSource.js","webpack://service-datasource/./src/index.js","webpack://service-datasource/./src/datasourceFactory.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DATASOURCE_STYLE","DATABASE","MEMORY","SEARCH","constructor","client","style","url","connected","_client","_db","_collection","getConnection","closeConnection","insert","data","remove","update","query","callback","DataSource","super","collection","setCollection","Augmented","isString","ret","myQuery","isFunction","Error","da","that","connect","err","db","close","find","toArray","results","Array","isArray","insertMany","result","insertOne","ping","MemoryDataSource","MongoDataSource","SOLRDataSource","DataSourceFactory","type","Type","MONGODB","SOLR"],"mappings":"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","file":"service-datasource.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"service-datasource\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"service-datasource\"] = factory();\n\telse\n\t\troot[\"service-datasource\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","const DATASOURCE_STYLE = {};\nDATASOURCE_STYLE.DATABASE = Symbol(\"database\");\nDATASOURCE_STYLE.MEMORY = Symbol(\"memory\");\nDATASOURCE_STYLE.SEARCH = Symbol(\"search\");\n\nexport default DATASOURCE_STYLE;\n","import DATASOURCE_STYLE from \"./datasourceStyle.js\";\n\n/**\n * The datasource object for use as an interface for a datasource\n * @interface DataSource\n * @memberof Augmented.Service\n */\nclass DataSource {\n    constructor(client, style, url) {\n      this.connected = false;\n      this.style = (style) ? style : DATASOURCE_STYLE.DATABASE;\n      this._client = (client) ? client : null;\n      this.url = (url) ? url : \"\";\n      this._db = null;\n      this._collection = null;\n    };\n\n  /**\n   * @property {object} client The client for use in the DataSource\n   * @memberof Augmented.Service.DataSource\n   */\n\n  /**\n   * @property {string} url The url for the datasource (if applicable)\n   * @memberof Augmented.Service.DataSource\n   */\n\n  /**\n   * @property {object} db The database (or simular) for the datasource (if applicable)\n   * @memberof Augmented.Service.DataSource\n   */\n\n  /**\n   * @property {object} collection The collection for use in the DataSource\n   * @memberof Augmented.Service.DataSource\n   */\n\n  /**\n   * @method getConnection Get a connection to the DataSource\n   * @memberof Augmented.Service.DataSource\n   * @returns {boolean} Returns true if a connection is established\n   */\n  getConnection() {\n    return false;\n  };\n  /**\n   * @method closeConnection Close a connection to the DataSource (depending on type may not be needed)\n   * @memberof Augmented.Service.DataSource\n   * @returns {boolean} Returns true if a connection is established\n   */\n  closeConnection() {};\n  /**\n   * @method insert Insert data\n   * @memberof Augmented.Service.DataSource\n   * @param {object} data Data to insert\n   */\n  insert(data) {\n  };\n  /**\n   * @method remove Remove data\n   * @memberof Augmented.Service.DataSource\n   * @param {object} data Data to remove\n   */\n  remove(data) {\n  };\n  /**\n   * @method update Update data\n   * @memberof Augmented.Service.DataSource\n   * @param {object} data Data to update\n   */\n  update(data) {};\n  /**\n   * @method query Query data\n   * @memberof Augmented.Service.DataSource\n   * @param {object} query The query object\n   * @param {function} callback A callback to execute during the query\n   * @returns {object} Returns a value from the query or response code\n   */\n  query(query, callback) {\n    return null;\n  };\n  /**\n    * @method getCollection Get the collection\n    * @memberof Augmented.Service.DataSource\n    * @returns {object} Returns the collection\n    */\n  get collection() {\n    return this._collection;\n  };\n\n  /**\n   * @method setCollection Set the collection by name\n   * @memberof Augmented.Service.DataSource\n   * @param {string} name The name of the collection\n   */\n  set collection(name) {\n    this._collection = name;\n  };\n\n  /**\n    * @method getClient Get the client\n    * @memberof Augmented.Service.DataSource\n    * @returns {object} Returns the client\n    */\n  get client() {\n    return this._client;\n  };\n};\n\nexport default DataSource;\n","import DataSource from \"./datasource.js\";\nimport DATASOURCE_STYLE from \"./datasourceStyle.js\";\n\nclass MemoryDataSource extends DataSource {\n  constructor() {\n    super(null, DATASOURCE_STYLE.MEMORY, null);\n    this._db = {};\n  };\n\n  getConnection(url, collection) {\n    this.connected = true;\n    if (collection) {\n      this._collection = collection;\n    }\n\n    this.url = url;\n\n    return true;\n  };\n\n  closeConnection() {\n    if (this._db && this.connected) {\n      this.connected = false;\n      this._db = null;\n      this._collection = null;\n    }\n  };\n\n  setCollection(name) {\n    if (name && Augmented.isString(name)) {\n      this._collection = name;\n      this._db[this._collection] = {};\n    }\n  };\n\n  query(query, callback) {\n    let ret = {};\n    if (this._collection && this.connected) {\n      //debug(\"The query: \" + query);\n      let myQuery = query;\n      if (Augmented.isFunction(query)) {\n        myQuery = query();\n      }\n      const obj = this._db[this._collection];\n      ret = obj[myQuery];\n      if (callback) {\n        callback(ret);\n      }\n    }\n    return ret;\n  };\n\n  insert(data, callback) {\n    let ret = {};\n    if (this._collection && this.connected) {\n      const obj = this._db[this._collection];\n      obj[this._collection] = data;\n      ret = data;\n      if (callback) {\n        callback(da);\n      }\n    } else {\n      throw new Error(\"no collection defined or not connected.\");\n    }\n    return ret;\n  };\n};\n\nexport default MemoryDataSource;\n","import DataSource from \"./datasource.js\";\nimport DATASOURCE_STYLE from \"./datasourceStyle.js\";\n\n// const debug = (message) => {\n//   console.debug(message);\n// };\n\n/**\n * The MongoDB datasource instance class\n * @extends DataSource\n */\nclass MongoDataSource extends DataSource {\n  constructor(client) {\n    super(client, DATASOURCE_STYLE.DATABASE, null);\n  };\n\n  setCollection(name) {\n    //debug(\"setCollection: \" + name);\n    if (name && Augmented.isString(name)) {\n      //debug(\"collection: \" + name);\n      this._collection = this._db.collection(name);\n    } //else {\n      //    debug(\"no collection set\");\n      //}\n  };\n\n  getConnection(url, collection) {\n    this.connected = false;\n    let that = this;\n    if (this.client && !this.connected) {\n\n      // unclear if the client supports arrow functions\n      this._client.connect(url, (err, db) => {\n        if(!err) {\n          if (collection) {\n            //debug(\"getConnection: collection: \" + collection);\n            that._collection = db.collection(collection);\n          } //else {\n            //debug(\"getConnection: no collection\");\n            //}\n          that._db = db;\n          that.url = url;\n          that.connected = true;\n          that.style = DATASOURCE_STYLE.DATABASE;\n        } else {\n          throw new Error(err);\n        }\n      });\n      return true;\n    } else {\n      throw new Error(\"No client was passed.\");\n      //logger.error(\"no client was passed.\");\n    }\n    return false;\n  };\n\n  closeConnection() {\n    if (this._db && this.connected) {\n      this._db.close();\n      this.connected = false;\n      this._db = null;\n      this._collection = null;\n    }\n  };\n\n  query(query, callback) {\n    let ret = {};\n    if (this._collection && this.connected) {\n      //debug(\"The query: \" + query);\n      let myQuery = query;\n      if (Augmented.isFunction(query)) {\n        myQuery = query();\n      }\n      // unclear if the client supports arrow functions\n      this._collection.find(myQuery).toArray( (err, results) => {\n        if(!err) {\n          //debug(\"Results: \" + JSON.stringify(results));\n\n          if (results) {\n            ret = results;\n          }\n          if (callback) {\n            callback(ret);\n          } else {\n            //debug(\"MongoDatasource, no callback\");\n          }\n        } else {\n          throw new Error(err);\n        }\n      });\n    } else {\n      throw new Error(\"no collection defined or not connected to db.\");\n      //logger.error(\"no collection defined or not connected to db.\");\n    }\n    //debug(\"ret: \" + JSON.stringify(ret));\n    return ret;\n  };\n\n  insert(data, callback) {\n    let ret = {};\n    if (this._collection && this.connected) {\n      if (Array.isArray(data)) {\n        // unclear if the client supports arrow functions\n        this._collection.insertMany(data, (err, result) => {\n          if(!err) {\n            //debug(\"Result: \" + JSON.stringify(result));\n            if (result) {\n              ret = result;\n              if (callback) {\n                callback(ret);\n              }\n            }\n          } else {\n            throw new Error(err);\n          }\n        });\n      } else {\n        // unclear if the client supports arrow functions\n        this._collection.insertOne(data, (err, result) => {\n          if(!err) {\n            //debug(\"Result: \" + JSON.stringify(result));\n            if (result) {\n              ret = result;\n              if (callback) {\n                callback(ret);\n              }\n            }\n          } else {\n            throw new Error(err);\n          }\n        });\n      }\n    } else {\n      throw new Error(\"no collection defined or not connected to db.\");\n      //logger.error(\"no collection defined or not connected to db.\");\n    }\n    //debug(\"ret: \" + JSON.stringify(ret));\n    return ret;\n  };\n\n  update(query, data, callback) {\n    if (this._collection && this.connected) {\n      //debug(\"The query: \" + query);\n      let myQuery = query;\n      if (Augmented.isFunction(query)) {\n        myQuery = query();\n      }\n      // unclear if the client supports arrow functions\n      this.collection.update(myQuery, data, (err, result) => {\n        if(!err) {\n          //debug(\"Result: \" + JSON.stringify(result));\n        } else {\n          throw new Error(err);\n        }\n      });\n\n      if (callback) {\n        callback(data);\n      }\n    } else {\n      throw new Error(\"no collection defined or not connected to db.\");\n      //logger.error(\"no collection defined or not connected to db.\");\n    }\n    return data;\n  };\n\n  remove(query, callback) {\n    let ret = {};\n    if (this._collection && this.connected) {\n      //debug(\"The query: \" + query);\n      let myQuery = query;\n      if (Augmented.isFunction(query)) {\n        myQuery = query();\n      }\n      // unclear if the client supports arrow functions\n      this.collection.remove(myQuery, (err, results) => {\n        if(!err) {\n          if (callback) {\n            callback();\n          }\n        } else {\n          throw new Error(err);\n        }\n      });\n    } else {\n      throw new Error(\"no collection defined or not connected to db.\");\n      //logger.error(\"no collection defined or not connected to db.\");\n    }\n    return ret;\n  };\n};\n\nexport default MongoDataSource;\n","import DataSource from \"./datasource.js\";\nimport DATASOURCE_STYLE from \"./datasourceStyle.js\";\n\n/**\n * The SOLR datasource instance class - WIP\n * @constructor SOLRDataSource\n * @implements {Augmented.Service.DataSource}\n * @augments Augmented.Service.DataSource\n * @memberof Augmented.Service\n */\nclass SOLRDataSource extends DataSource {\n  constructor(client) {\n    super(client, DATASOURCE_STYLE.DATABASE, null);\n  };\n\n  getConnection(url, collection) {\n    this.connected = false;\n    let that = this;\n    if (this._client && !this.connected) {\n      this._client.ping((err, db) =>{\n        if(!err) {\n          //logger.debug(\"collection: \" + collection);\n          that._collection = collection;\n          that._db = db;\n          that.url = url;\n          that.connected = true;\n          that.style = DATASOURCE_STYLE.SEARCH;\n        } else {\n          throw new Error(err);\n        }\n      });\n    } else {\n      throw new Error(\"No client was passed.\");\n    }\n    return this.connected;\n  };\n\n  closeConnection() {\n    if (this._db && this.connected) {\n      this.connected = false;\n      this._db = null;\n      this._collection = null;\n    }\n  };\n\n  query(query, callback) {\n    let ret = {};\n\n    return ret;\n  };\n\n  insert(data, callback) {\n    let ret = {};\n\n    return ret;\n  };\n\n  update(query, data, callback) {\n\n    return data;\n  };\n\n  remove(query, callback) {\n    let ret = {};\n\n    return ret;\n  };\n};\n\nexport default SOLRDataSource;\n","import DataSource from \"./datasource.js\";\nimport DATASOURCE_STYLE from \"./datasourceStyle.js\";\nimport MemoryDataSource from \"./memoryDataSource.js\";\nimport MongoDataSource from \"./mongoDataSource.js\";\nimport SOLRDataSource from \"./solrDataSource.js\";\nimport DataSourceFactory from \"./datasourceFactory.js\";\n\nmodule.exports.DataSource = DataSource;\nmodule.exports.DATASOURCE_STYLE = DATASOURCE_STYLE;\nmodule.exports.MemoryDataSource = MemoryDataSource;\nmodule.exports.MongoDataSource = MongoDataSource;\nmodule.exports.SOLRDataSource = SOLRDataSource;\nmodule.exports.DataSourceFactory = DataSourceFactory;\n","import MemoryDataSource from \"./memoryDataSource.js\";\nimport MongoDataSource from \"./mongoDataSource.js\";\nimport SOLRDataSource from \"./solrDataSource.js\";\n\n/**\n * The datasource factory to return an instance of a datasource configured by type\n * @namespace DataSourceFactory\n * @memberof Augmented.Service\n */\nclass DataSourceFactory {\n  constructor() {\n  };\n  static getDatasource(type, client) {\n    if (type === DataSourceFactory.Type.MONGODB) {\n      return new MongoDataSource(client);\n    } else if (type === DataSourceFactory.Type.SOLR) {\n      return new SOLRDataSource(client);\n    } else if (type === DataSourceFactory.Type.MEMORY) {\n      return new MemoryDataSource();\n    }\n    return null;\n  };\n};\n\nDataSourceFactory.Type = {};\nDataSourceFactory.Type.MEMORY = Symbol(\"memory\");\nDataSourceFactory.Type.MONGODB = Symbol(\"mongodb\");\nDataSourceFactory.Type.SOLR = Symbol(\"solr\");\n\nexport default DataSourceFactory;\n"],"sourceRoot":""}